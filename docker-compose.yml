services:
  poll:
    build: poll/.
    links:
      - redis
      - db
    ports:
      - "5050:80"
    environment:
      - REDIS_HOST=redis
    networks:
      - poll-tier
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 5s
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    networks:
      - poll-tier
      - back-tier
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 5s
  worker:
    build: worker/.
    environment:
      - REDIS_HOST=redis
      - POSTGRES_HOST=db
      - POSTGRES_PORT=5432
      - POSTGRES_DB=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
    ports:
      - "8080:80"
    networks:
      - back-tier
    depends_on:
      redis:
        condition: service_healthy
      db:
        condition: service_healthy
  db:
    image: postgres:16-alpine
    networks:
      - result-tier
      - back-tier
    ports:
      - "5432:5432"
    volumes:
      - db-data:/var/lib/postgresql/data
      - "./schema.sql:/docker-entrypoint-initdb.d/init.sql"
    environment:
      - "POSTGRES_USER=postgres"
      - "POSTGRES_PASSWORD=password"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
  result:
    build: result/.
    ports:
      - "5001:80"
    environment:
      - POSTGRES_HOST=db
      - POSTGRES_PORT=5432
      - POSTGRES_DB=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
    networks:
      - result-tier
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 5s
volumes:
  db-data:
networks:
  poll-tier:
  result-tier:
  back-tier: